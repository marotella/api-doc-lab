Part 1: SWAPI#
Instructions#
For each of the following use the SWAPI docs, to figure out the complete URL(s) (including params or queries) that you need to go to in order to reach the following data:

1. The height of Darth Vader: 202
- http://swapi.dev/api/people/?search=darth

2. The population of the planet Alderaan: 2000000000
-http://swapi.dev/api/planets/?search=alderaan
3.The name of the manufacturer of the Millennium Falcon: Corellian Engineering Corporation
http://swapi.dev/api/starships/?search=millennium falcon

4. The name of the species that C-3PO belongs to (multiple URLs):

"https://swapi.dev/api/species/2/"
http://swapi.dev/api/people/2

5. The title of each film that Obi-Wan Kenobi is in (multiple URLs)
 "https://swapi.dev/api/films/1/",
 "https://swapi.dev/api/films/2/",
 "https://swapi.dev/api/films/3/",
 "https://swapi.dev/api/films/4/",
 "https://swapi.dev/api/films/5/",
 "https://swapi.dev/api/films/6/"


http://swapi.dev/api/people/?search=obi

6. Use the search query (the how to on the search query is at the bottom of the Getting Started section of the documentation) to get the information about the Millennium Falcon, it’s a starship
http://swapi.dev/api/starships/?search=millennium
{
    "count": 1,
    "next": null,
    "previous": null,
    "results": [
        {
            "name": "Millennium Falcon",
            "model": "YT-1300 light freighter",
            "manufacturer": "Corellian Engineering Corporation",
            "cost_in_credits": "100000",
            "length": "34.37",
            "max_atmosphering_speed": "1050",
            "crew": "4",
            "passengers": "6",
            "cargo_capacity": "100000",
            "consumables": "2 months",
            "hyperdrive_rating": "0.5",
            "MGLT": "75",
            "starship_class": "Light freighter",
            "pilots": [
                "https://swapi.dev/api/people/13/",
                "https://swapi.dev/api/people/14/",
                "https://swapi.dev/api/people/25/",
                "https://swapi.dev/api/people/31/"
            ],
            "films": [
                "https://swapi.dev/api/films/1/",
                "https://swapi.dev/api/films/2/",
                "https://swapi.dev/api/films/3/"
            ],
            "created": "2014-12-10T16:59:45.094000Z",
            "edited": "2014-12-20T21:23:49.880000Z",
            "url": "https://swapi.dev/api/starships/10/"
        }
    ]
}





Summary#
In this section, you’ll be looking through the documentation for the Social Mountain API and answering questions. You’ll also be making requests and recording the URLs and some information about the responses. Run the requests in Postman. Note: this API is live and viewable by your classmates and staff. Keep things appropriate for class.

You can view the documentation for the Social Mountain API here

The base URL of your requests is: https://practiceapi.devmountain.com/api (make sure to have the “s” in “https”)

1. Check if the POST request accept params, queries, and/or a body. Which one(s) and what information is it expecting to be sent? It takes parameter of text and it would be json data containing a string.

2. What data type does the GET request return? JSON object containing id, text, and date.

3. What would the URL look like for deleting the post with the id 555? (This post does not exist anymore, but the syntax is the same for existing posts)
https://practiceapi.devmountain.com/api/555


4. List the possible response codes from the GET request at /posts/filter
200 - returns the data 409 request query is missing required text property


5. Create a post whose text is your name, record the URL and body here: https://practiceapi.devmountain.com/api/posts
{
    "text": "Michelle Rotella"
}

6. What would the URL and body object be to update the post you just made to contain your faovrite color instead of your name?
https://practiceapi.devmountain.com/api/posts/?id=1882
{
    "text": "black"
}

7. What is the URL to get posts that contain the text “blue”?
https://practiceapi.devmountain.com/api/posts/filter/?text=blue

8. Make a request to GET all the posts. What are the content type and charset of the response? (Hint: look on the Headers)
https://practiceapi.devmountain.com/api/posts/
application/json; charset=utf-8

9. What would cause a PUT request to return a 409 status? It is missing the text property needed to update
10. What happens if you try to send a query in the GET request URL? Why do you get that response?  It still returns all data - because that is the only response it was set up for.  You have to use filter to query.